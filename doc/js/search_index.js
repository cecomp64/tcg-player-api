var search_data = {"index":{"searchIndex":["tcgplayerapi","bearertoken","pokemon","responsestruct","resultarray","authorize()","categories()","category()","category_details()","category_search_manifest()","category_search_products()","each()","expired?()","method_missing()","new()","new()","new()","query()","respond_to_missing?()","to_s()","try()"],"longSearchIndex":["tcgplayerapi","tcgplayerapi::bearertoken","tcgplayerapi::pokemon","tcgplayerapi::responsestruct","tcgplayerapi::resultarray","tcgplayerapi#authorize()","tcgplayerapi#categories()","tcgplayerapi::pokemon#category()","tcgplayerapi#category_details()","tcgplayerapi#category_search_manifest()","tcgplayerapi#category_search_products()","tcgplayerapi::responsestruct#each()","tcgplayerapi::bearertoken#expired?()","tcgplayerapi::responsestruct#method_missing()","tcgplayerapi::new()","tcgplayerapi::bearertoken::new()","tcgplayerapi::pokemon::new()","tcgplayerapi#query()","tcgplayerapi::responsestruct#respond_to_missing?()","tcgplayerapi::responsestruct#to_s()","tcgplayerapi::responsestruct#try()"],"info":[["TCGPlayerAPI","","TCGPlayerAPI.html","","<p>Wrap up request handling and common functions for TCGPlayer price API\n"],["TCGPlayerAPI::BearerToken","","TCGPlayerAPI/BearerToken.html","",""],["TCGPlayerAPI::Pokemon","","TCGPlayerAPI/Pokemon.html","","<p>Helpers for pokemon-centric tasks\n"],["TCGPlayerAPI::ResponseStruct","","TCGPlayerAPI/ResponseStruct.html","",""],["TCGPlayerAPI::ResultArray","","TCGPlayerAPI/ResultArray.html","",""],["authorize","TCGPlayerAPI","TCGPlayerAPI.html#method-i-authorize","(public_key, private_key)","<p>Get a new bearer token Do this automatically if other requests fail\n"],["categories","TCGPlayerAPI","TCGPlayerAPI.html#method-i-categories","(params = {})","<p>limit - max to return (default 10) offset - number of categories to skip (for paging) sort_order - property â€¦\n"],["category","TCGPlayerAPI::Pokemon","TCGPlayerAPI/Pokemon.html#method-i-category","()",""],["category_details","TCGPlayerAPI","TCGPlayerAPI.html#method-i-category_details","(ids)","<p>docs.tcgplayer.com/reference/catalog_getcategory-1\n"],["category_search_manifest","TCGPlayerAPI","TCGPlayerAPI.html#method-i-category_search_manifest","(id)","<p>docs.tcgplayer.com/reference/catalog_getcategorysearchmanifest\n"],["category_search_products","TCGPlayerAPI","TCGPlayerAPI.html#method-i-category_search_products","(params = {})","<p>docs.tcgplayer.com/reference/catalog_searchcategory\n"],["each","TCGPlayerAPI::ResponseStruct","TCGPlayerAPI/ResponseStruct.html#method-i-each","(&block)","<p>Iterates over `self.results` and attempts to fetch any missing results\n"],["expired?","TCGPlayerAPI::BearerToken","TCGPlayerAPI/BearerToken.html#method-i-expired-3F","()",""],["method_missing","TCGPlayerAPI::ResponseStruct","TCGPlayerAPI/ResponseStruct.html#method-i-method_missing","(mid, *args)","<p>Create ResponseStructs out of any nested hashes or arrays of hashes\n"],["new","TCGPlayerAPI","TCGPlayerAPI.html#method-c-new","(params = {})",""],["new","TCGPlayerAPI::BearerToken","TCGPlayerAPI/BearerToken.html#method-c-new","(params = {})",""],["new","TCGPlayerAPI::Pokemon","TCGPlayerAPI/Pokemon.html#method-c-new","(_tcg)",""],["query","TCGPlayerAPI","TCGPlayerAPI.html#method-i-query","(url, _params = {})","<p>Error handling?\n"],["respond_to_missing?","TCGPlayerAPI::ResponseStruct","TCGPlayerAPI/ResponseStruct.html#method-i-respond_to_missing-3F","(mid, include_private = nil)",""],["to_s","TCGPlayerAPI::ResponseStruct","TCGPlayerAPI/ResponseStruct.html#method-i-to_s","()",""],["try","TCGPlayerAPI::ResponseStruct","TCGPlayerAPI/ResponseStruct.html#method-i-try","(default, &blk)","<p>Attempt to execute a given block of code.  Return the result on success, or the <strong>default</strong> on failure\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">try</span>(<span class=\"ruby-keyword\">nil</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}